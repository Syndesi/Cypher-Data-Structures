<?php

declare(strict_types=1);

namespace Syndesi\CypherDataStructures\Type;

use Syndesi\CypherDataStructures\Contract\IsEqualToInterface;
use Syndesi\CypherDataStructures\Contract\NodeInterface;
use Syndesi\CypherDataStructures\Contract\NodeLabelStorageInterface;
use Syndesi\CypherDataStructures\Contract\PropertyStorageInterface;
use Syndesi\CypherDataStructures\Exception\InvalidArgumentException;

class Node implements NodeInterface
{
    private NodeLabelStorageInterface $nodeLabelStorage;
    private PropertyStorageInterface $propertyStorage;
    private PropertyStorageInterface $identifierStorage;

    /**
     * @throws InvalidArgumentException
     */
    public function __construct(
    ) {
        $this->nodeLabelStorage = new NodeLabelStorage();
        $this->propertyStorage = new PropertyStorage();
        $this->identifierStorage = new PropertyStorage();
    }

    public function __toString()
    {



        return $this->getNodeLabel();
    }

    public function isEqualTo(mixed $element): bool
    {
        if (!($element instanceof NodeInterface)) {
            return false;
        }

        // compare labels
        if ($this->nodeLabelStorage->count() !== $element->getNodeLabels()->count()) {
            return false;
        }
        foreach ($this->nodeLabelStorage as $key) {
            if (!$element->hasNodeLabel($key)) {
                return false;
            }
        }

        // compare identifying properties
        if ($this->identifierStorage->count() !== $element->getIdentifiers()->count()) {
            return false;
        }
        foreach ($this->identifierStorage as $key) {
            if (!$element->hasIdentifier($key)) {
                return false;
            }
            $identifier = $this->getIdentifier($key);
            $elementIdentifier = $element->getIdentifier($key);
            if ($identifier instanceof IsEqualToInterface) {
                if (!$identifier->isEqualTo($elementIdentifier)) {
                    return false;
                }
            } else {
                if ($identifier !== $elementIdentifier) {
                    return false;
                }
            }
        }
        return true;
    }
}
